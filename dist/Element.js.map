{"version":3,"sources":["classes/Skeleton.js","classes/Hand.js","classes/Bone.js","classes/Pointable.js","classes/Frame.js","LeapMotion.js","Element.js"],"names":["Skeleton","hand","bones","forearm","THREE","Bone","name","type","push","wrist","add","fingers","forEach","finger","metacarpal","proximal","medial","distal","tip","setFromHand","getBoneByName","setRotationFromMatrix","arm","basis","position","copy","elbow","_updateBonePositionAndRotation","palm","index","_updateBonePosition","tipPosition","bone","_position","Vector3","toArray","parent","worldToLocal","rotation","Matrix4","extractRotation","matrixWorld","getInverse","multiply","_updateBoneRotation","Hand","handData","confidence","id","timeVisible","Object","assign","armBasis","armWidth","width","armBasisVectors","map","vector","negate","makeBasis","grabAngle","grabStrength","grab","angle","strength","direction","palmNormal","palmPosition","palmVelocity","palmWidth","normal","velocity","negatedPalmNormal","lookAt","pinchDistance","pinchStrength","pinch","distance","_skeleton","constructor","names","Pointable","pointableData","hands","handId","find","carpPosition","mcpPosition","pipPosition","dipPosition","btipPosition","bases","basisVectors","basisMatrix","pointable","prevJoint","length","nextJoint","distanceTo","extended","Frame","frameData","currentFrameRate","timestamp","pointables","LeapMotion","addEventListener","event","messageCallback","frames","framesLength","frame","detail","unshift","pop","data","JSON","parse","hasOwnProperty","serviceVersion","version","dispatchEvent","CustomEvent","bubbles","state","attached","streaming","webSocket","WebSocket","undefined","close","channel","socket","io","socketURL","on","emit","message","prototype","EventDispatcher","LeapMotionElement","leapMotion","eventTypes","eventName","HTMLElement","Event","attributeName","oldValue","newValue","startBroadcast","listenToBroadcast","toLowerCase","document","createElement","customElements","define"],"mappings":"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","file":"Element.js","sourceRoot":"..\\script\\leap-motion","sourcesContent":["/*\r\n    TODO\r\n        *\r\n*/\r\n\r\n// https://threejs.org/docs/#api/en/objects/Bone\r\n// https://threejs.org/docs/#api/en/objects/Skeleton\r\n// https://threejs.org/docs/#api/en/helpers/SkeletonHelper\r\n// https://threejs.org/docs/#api/en/objects/SkinnedMesh\r\n\r\nclass Skeleton extends THREE.Skeleton {\r\n    constructor(hand) {\r\n        const bones = [];\r\n\r\n        const forearm = new THREE.Bone();\r\n        forearm.name = `${hand.type} forearm`;\r\n        bones.push(forearm);\r\n\r\n        const wrist = new THREE.Bone();\r\n        wrist.name = `${hand.type} wrist`;\r\n        forearm.add(wrist);\r\n        bones.push(wrist);\r\n\r\n        hand.fingers.forEach(finger => {\r\n            // https://developer-archive.leapmotion.com/documentation/javascript/devguide/Intro_Skeleton_API.html\r\n            \r\n            const metacarpal = new THREE.Bone();\r\n            metacarpal.name = `${hand.type} ${finger.name} ${finger.metacarpal.name}`;\r\n            bones.push(metacarpal);\r\n            wrist.add(metacarpal);\r\n\r\n            const proximal = new THREE.Bone();\r\n            proximal.name = `${hand.type} ${finger.name} ${finger.proximal.name}`;\r\n            bones.push(proximal);\r\n            metacarpal.add(proximal);\r\n\r\n            const medial = new THREE.Bone();\r\n            medial.name = `${hand.type} ${finger.name} ${finger.medial.name}`;\r\n            bones.push(medial);\r\n            proximal.add(medial);\r\n\r\n            const distal = new THREE.Bone();\r\n            distal.name = `${hand.type} ${finger.name} ${finger.distal.name}`;\r\n            bones.push(distal);\r\n            medial.add(distal);\r\n\r\n            const tip = new THREE.Bone();\r\n            tip.name = `${hand.type} ${finger.name} \"tip\"`;\r\n            bones.push(tip);\r\n            distal.add(tip);\r\n        });\r\n\r\n        super(bones);\r\n\r\n        this.setFromHand(hand);\r\n    }\r\n\r\n    setFromHand(hand) {\r\n        const forearm = this.getBoneByName(`${hand.type} forearm`);\r\n        forearm.setRotationFromMatrix(hand.arm.basis);\r\n        forearm.position.copy(hand.elbow);\r\n\r\n        const wrist = this.getBoneByName(`${hand.type} wrist`);\r\n        this._updateBonePositionAndRotation(wrist, hand.wrist, hand.palm.basis);\r\n        \r\n        hand.fingers.forEach((finger, index) => {                      \r\n            const metacarpal = this.getBoneByName(`${hand.type} ${finger.name} ${finger.metacarpal.name}`);\r\n            this._updateBonePositionAndRotation(metacarpal, finger.metacarpal.position, finger.metacarpal.basis);\r\n\r\n            const proximal = this.getBoneByName(`${hand.type} ${finger.name} ${finger.proximal.name}`);\r\n            this._updateBonePositionAndRotation(proximal, finger.proximal.position, finger.proximal.basis);\r\n\r\n            const medial = this.getBoneByName(`${hand.type} ${finger.name} ${finger.medial.name}`);\r\n            this._updateBonePositionAndRotation(medial, finger.medial.position, finger.medial.basis);\r\n\r\n            const distal = this.getBoneByName(`${hand.type} ${finger.name} ${finger.distal.name}`);\r\n            this._updateBonePositionAndRotation(distal, finger.distal.position, finger.distal.basis);\r\n\r\n            const tip = this.getBoneByName(`${hand.type} ${finger.name} \"tip\"`);\r\n            this._updateBonePosition(tip, finger.tipPosition);\r\n        });\r\n    }\r\n\r\n    _updateBonePosition(bone, position) {\r\n        const _position = new THREE.Vector3(...position.toArray());\r\n        bone.parent.worldToLocal(_position);\r\n        bone.position.copy(_position);\r\n    }\r\n    _updateBoneRotation(bone, basis) {\r\n        const rotation = new THREE.Matrix4();\r\n        rotation.extractRotation(bone.parent.matrixWorld);\r\n        rotation.getInverse(rotation);\r\n        rotation.multiply(basis);\r\n        bone.setRotationFromMatrix(rotation);\r\n    }\r\n    _updateBonePositionAndRotation(bone, position, basis) {\r\n        this._updateBonePosition(bone, position);\r\n        this._updateBoneRotation(bone, basis);\r\n    }\r\n}\r\n\r\nexport default Skeleton;","// https://developer-archive.leapmotion.com/documentation/javascript/api/Leap.Hand.html\r\n\r\nimport Skeleton from \"./Skeleton.js\";\r\n\r\nclass Hand {\r\n    constructor(handData) {\r\n        const {confidence, id, timeVisible, type} = handData;\r\n        Object.assign(this, {confidence, id, timeVisible, type});\r\n\r\n        const {armBasis, armWidth} = handData;\r\n        this.arm = {\r\n            width : armWidth,\r\n            basis : new THREE.Matrix4(),\r\n        };\r\n\r\n        {\r\n            // https://developer-archive.leapmotion.com/documentation/javascript/api/Leap.Hand.html#Hand.direction\r\n            const armBasisVectors = armBasis.map(vector => new THREE.Vector3(...vector));\r\n            if(this.type == \"left\") \r\n                armBasisVectors[0].negate();\r\n            this.arm.basis.makeBasis(...armBasisVectors)\r\n        }\r\n\r\n        const {elbow} = handData;\r\n        this.elbow = new THREE.Vector3(...elbow);\r\n\r\n        const {wrist} = handData;\r\n        this.wrist = new THREE.Vector3(...wrist);\r\n\r\n        const {grabAngle, grabStrength} = handData;\r\n        this.grab = {\r\n            angle : grabAngle,\r\n            strength : grabStrength,\r\n        };\r\n\r\n        // https://developer-archive.leapmotion.com/documentation/javascript/api/Leap.Hand.html#Hand.direction\r\n        const {direction} = handData;\r\n        this.direction = new THREE.Vector3(...direction);\r\n\r\n        const {palmNormal, palmPosition, palmVelocity, palmWidth} = handData;\r\n        this.palm = {\r\n            normal : new THREE.Vector3(...palmNormal),\r\n            position : new THREE.Vector3(...palmPosition),\r\n            velocity : new THREE.Vector3(...palmVelocity),\r\n            width : palmWidth,\r\n            basis : new THREE.Matrix4(),\r\n            direction : this.direction,\r\n        };\r\n        \r\n        {\r\n            const negatedPalmNormal = new THREE.Vector3();\r\n            negatedPalmNormal.copy(this.palm.normal); negatedPalmNormal.negate();\r\n\r\n            this.palm.basis.lookAt(\r\n                this.wrist, // center\r\n                this.palm.position, // eye\r\n                negatedPalmNormal, // up\r\n            );\r\n        }\r\n\r\n        const {pinchDistance, pinchStrength} = handData;\r\n        this.pinch = {\r\n            distance : pinchDistance,\r\n            strength : pinchStrength,\r\n        };\r\n\r\n        this.fingers = [];\r\n    }\r\n\r\n    get skeleton() {\r\n        this._skeleton = this._skeleton || new Skeleton(this);\r\n        return this._skeleton;\r\n    }\r\n}\r\n\r\nexport default Hand;","// https://developer-archive.leapmotion.com/documentation/javascript/api/Leap.Bone.html\r\n\r\nclass Bone {\r\n    constructor(basis, type) {\r\n        this.basis = basis;\r\n\r\n        this.type = type;\r\n        this.name = this.constructor.names[this.type];\r\n    }\r\n\r\n    static get names() {\r\n        return [\r\n            \"metacarpal\",\r\n            \"proximal\",\r\n            \"medial\",\r\n            \"distal\",\r\n        ];\r\n    }\r\n}\r\n\r\nexport default Bone;","// https://developer-archive.leapmotion.com/documentation/javascript/api/Leap.Pointable.html\r\n\r\nimport Bone from \"./Bone.js\";\r\n\r\nclass Pointable {\r\n    constructor(pointableData, hands) {\r\n        const {id, handId} = pointableData;\r\n        this.id = id;\r\n        this.handId = handId;\r\n        this.hand = hands.find(hand => hand.id == this.handId);\r\n        \r\n        const {type} = pointableData;\r\n        this.type = type;\r\n        this.name = this.constructor.names[this.type];\r\n        this.hand.fingers[this.type] = this;\r\n\r\n        // https://developer-archive.leapmotion.com/documentation/javascript/devguide/Intro_Skeleton_API.html\r\n        const {carpPosition, mcpPosition, pipPosition, dipPosition, btipPosition} = pointableData;\r\n        \r\n        this.carpPosition = new THREE.Vector3(...carpPosition);\r\n        this.mcpPosition = new THREE.Vector3(...mcpPosition);\r\n        this.pipPosition = new THREE.Vector3(...pipPosition);\r\n        this.dipPosition = new THREE.Vector3(...dipPosition);\r\n        this.btipPosition = new THREE.Vector3(...btipPosition);\r\n\r\n        const {bases} = pointableData;\r\n        this.bones = bases.map((basis, index) => {\r\n            const basisVectors = basis.map(vector => new THREE.Vector3(...vector));\r\n            \r\n            // https://developer-archive.leapmotion.com/documentation/javascript/api/Leap.Bone.html#Bone.basis\r\n            if(this.hand.type == \"left\")\r\n                basisVectors[0].negate();\r\n            \r\n            const basisMatrix = new THREE.Matrix4();\r\n            basisMatrix.makeBasis(...basisVectors);\r\n\r\n            return new Bone(basisMatrix, index);\r\n        });\r\n    \r\n        this.bones.forEach((bone, index) => {\r\n            bone.pointable = this;\r\n\r\n            if(index > 0)\r\n                bone.prevJoint = this.bones[index-1];\r\n\r\n            if(index < this.bones.length-1)\r\n                bone.nextJoint = this.bones[index+1];\r\n\r\n            switch(bone.name) {\r\n                case \"metacarpal\":\r\n                    this.metacarpal = bone;\r\n                    bone.length = this.carpPosition.distanceTo(this.mcpPosition);\r\n                    bone.position = this.carpPosition;\r\n                    break;\r\n                case \"proximal\":\r\n                    this.proximal = bone;\r\n                    bone.length = this.mcpPosition.distanceTo(this.pipPosition);\r\n                    bone.position = this.mcpPosition;\r\n                    break;\r\n                case \"medial\":\r\n                    this.medial = bone;\r\n                    bone.length = this.pipPosition.distanceTo(this.dipPosition);\r\n                    bone.position = this.pipPosition;\r\n                    break;\r\n                case \"distal\":\r\n                    this.distal = bone;\r\n                    bone.length = this.dipPosition.distanceTo(this.btipPosition);\r\n                    bone.position = this.dipPosition;\r\n                    break;\r\n                default:\r\n                    throw `undefined bone index ${index}`;\r\n            }\r\n        });\r\n\r\n        const {tipPosition} = pointableData;\r\n        this.tipPosition = new THREE.Vector3(...tipPosition);\r\n        \r\n        const {direction} = pointableData;\r\n        this.direction = new THREE.Vector3(...direction);\r\n\r\n        const {extended} = pointableData;\r\n        this.extended = extended;\r\n\r\n        const {length, width} = pointableData;\r\n        this.length = length;\r\n        this.width = width;\r\n\r\n        const {timeVisible} = pointableData;\r\n        this.timeVisible = timeVisible;\r\n    }\r\n\r\n    static get names() {\r\n        return [\r\n            \"thumb\",\r\n            \"index\",\r\n            \"middle\",\r\n            \"ring\",\r\n            \"pinky\",\r\n        ];\r\n    }\r\n}\r\n\r\nexport default Pointable;","// https://developer-archive.leapmotion.com/documentation/javascript/supplements/Leap_JSON.html\r\n\r\nimport Hand from \"./Hand.js\";\r\nimport Pointable from \"./Pointable.js\";\r\n\r\nclass Frame {\r\n    constructor(frameData) {\r\n        const {currentFrameRate, id, timestamp} = frameData;\r\n            Object.assign(this, {currentFrameRate, id, timestamp});\r\n\r\n        const {hands, pointables} = frameData;\r\n            this.hands = hands.map(handData => new Hand(handData));\r\n            this.pointables = pointables.map(pointableData => new Pointable(pointableData, this.hands));\r\n    }\r\n}\r\n\r\nexport default Frame;","// https://developer-archive.leapmotion.com/documentation/javascript/api/Leap_Classes.html#leap-namespace\r\n// https://developer-archive.leapmotion.com/documentation/javascript/api/Leap.Controller.html\r\n\r\n// https://github.com/leapmotion/leapjs/wiki/Websocket-Server-JSON\r\n\r\n/*\r\n    TODO\r\n        figure out a way to allow custom ways of sending/receiving data\r\n            socket.io, webRTC, websockets, etc\r\n*/\r\n\r\nimport Frame from \"./classes/Frame.js\";\r\n\r\nclass LeapMotion {\r\n    static get socketURL() {\r\n        return \"https://leap-motion.glitch.me/\";\r\n    }\r\n\r\n    constructor() {\r\n        this.addEventListener(\"message\", event => this.messageCallback(event));\r\n\r\n        this.frames = [];\r\n        this.framesLength = 100;\r\n        this.addEventListener(\"frame\", event => {\r\n            const frame = event.detail;\r\n            this.frames.unshift(frame);\r\n            if(this.frames.length > this.framesLength)\r\n                this.frames.pop();\r\n        });\r\n    }\r\n\r\n    static get eventTypes() {\r\n        return [\r\n            \"open\", \"close\",\r\n\r\n            \"message\",\r\n                \"version\",\r\n                \"device\",\r\n                    \"deviceConnected\", \"deviceDisconnected\",\r\n                    \"startedStreaming\", \"stoppedStreaming\",\r\n                \"raw-frame\", \"frame\",\r\n        ];\r\n    }\r\n\r\n    messageCallback(event) {\r\n        const data = JSON.parse(event.detail);\r\n\r\n        if(data.hasOwnProperty(\"version\")) {\r\n            this.serviceVersion = data.serviceVersion;\r\n            this.version = data.version;\r\n            \r\n            this.dispatchEvent(new CustomEvent(\"version\", {\r\n                bubbles : false,\r\n                detail : event,\r\n            }));\r\n        }\r\n        else if(data.hasOwnProperty(\"event\")) {\r\n            switch(data.event.type) {\r\n                case \"deviceEvent\":\r\n                    const {attached, id, streaming, type} = data.event.state;\r\n                    \r\n                    this.attached = attached;\r\n                    this.id = id;\r\n                    this.streaming = streaming;\r\n                    this.type = type;\r\n\r\n                    this.dispatchEvent(new CustomEvent(\"device\", {\r\n                        bubbles : false,\r\n                        detail : data,\r\n                    }));\r\n\r\n                    this.dispatchEvent(new CustomEvent(`device${data.event.state.attached? \"Connected\":\"Disconnected\"}`, {\r\n                        bubbles : false,\r\n                    }));\r\n                    this.dispatchEvent(new CustomEvent(`${data.event.state.streaming? \"started\":\"stopped\"}Streaming`, {\r\n                        bubbles : false,\r\n                    }));\r\n                    break;\r\n                default:\r\n                    this.dispatchEvent(new CustomEvent(\"unknown\", {\r\n                        bubbles : false,\r\n                        detail : data,\r\n                    }));\r\n                    break;\r\n            }\r\n        } else if(data.hasOwnProperty(\"currentFrameRate\")) {\r\n            this.frame = new Frame(data);\r\n\r\n            this.dispatchEvent(new CustomEvent(\"raw-frame\", {\r\n                bubbles : false,\r\n                detail : data,\r\n            }));\r\n\r\n            this.dispatchEvent(new CustomEvent(\"frame\", {\r\n                bubbles : false,\r\n                detail : this.frame,\r\n            }));\r\n        }\r\n    }\r\n\r\n    connect() {\r\n        this.webSocket = new WebSocket(\"ws://localhost:6437/v7.json\");\r\n\r\n        this.webSocket.addEventListener(\"open\", event => {\r\n            this.dispatchEvent(new CustomEvent(\"open\", {\r\n                bubbles : false,\r\n            }));\r\n\r\n            this.webSocket.addEventListener(\"message\", event => this.dispatchEvent(new CustomEvent(\"message\", {\r\n                bubbles : false,\r\n                detail : event.data,\r\n            })));\r\n\r\n            this.webSocket.addEventListener(\"close\", event => {\r\n                this.dispatchEvent(new CustomEvent(\"close\", {\r\n                    bubbles : false,\r\n                }));\r\n            });\r\n        });\r\n    }\r\n    disconnct() {\r\n        if(this.webSocket !== undefined) {\r\n            this.webSocket.close();\r\n            delete this.webSocket;    \r\n        }\r\n    }\r\n\r\n\r\n    startBroadcast(channel) {\r\n        if(this.socket == undefined) {\r\n            this.socket = new io(this.constructor.socketURL);\r\n            this.socket.on(\"connect\", () => {\r\n                this.addEventListener(\"message\", event => {\r\n                    const detail = event.detail;\r\n                    this.socket.emit(\"message\", {detail, channel});\r\n                });\r\n            });\r\n        }\r\n    }\r\n    stopBroadcast() {\r\n        if(this.socket !== undefined) {\r\n            this.socket.close();\r\n            delete this.socket;\r\n        }\r\n    }\r\n\r\n    listenToBroadcast(channel) {\r\n        if(this.socket == undefined) {\r\n            this.socket = new io(this.constructor.socketURL);\r\n            this.socket.on(\"connect\", () => {\r\n                this.socket.emit(\"join\", {channel});\r\n                this.socket.on(\"message\", message => {\r\n                    this.dispatchEvent(new CustomEvent(\"message\", {\r\n                        bubbles : true,\r\n                        detail : message.detail,\r\n                    }));\r\n                });\r\n            });\r\n        }\r\n    }\r\n    stopListeningToBroadcast() {\r\n        if(this.socket !== undefined) {\r\n            this.socket.close();\r\n            delete this.socket;\r\n        }\r\n    }\r\n}\r\n\r\nObject.assign(LeapMotion.prototype, THREE.EventDispatcher.prototype);\r\n\r\nexport default LeapMotion;","/*\r\n    TODO\r\n        Re-design remote streaming to allow many ways to stream data\r\n            Websocket, Socket.io, webRTC, etc\r\n            can add a \"load\" eventlistener to implement how to send/receive data\r\n            can also add a \"remote\" attribute that prevents connecting to a local websocket on load\r\n*/\r\n\r\nimport LeapMotion from \"./LeapMotion.js\";\r\n\r\nclass LeapMotionElement extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n\r\n        this.leapMotion = new LeapMotion();\r\n\r\n        this.leapMotion.constructor.eventTypes.forEach(eventName => {\r\n            this.leapMotion.addEventListener(eventName, event => this.dispatchEvent(event));\r\n        });\r\n    }\r\n\r\n    connectedCallback() {\r\n        // when added to a DOM\r\n        this.dispatchEvent(new Event(\"load\"));\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        // when removed from a DOM\r\n    }\r\n\r\n\r\n    static get observedAttributes() {\r\n        return [\r\n            \"send\", \"receive\",\r\n        ].map(attributeName => attributeName.toLowerCase())\r\n    }\r\n\r\n    attributeChangedCallback(attributeName, oldValue, newValue) {\r\n        switch(attributeName) {\r\n            case \"send\":\r\n                this.addEventListener(\"open\", event => {\r\n                    this.leapMotion.startBroadcast(newValue);\r\n                });\r\n                break;\r\n            case \"receive\":\r\n                this.addEventListener(\"load\", event => {\r\n                    this.leapMotion.listenToBroadcast(newValue);\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nif(document.createElement(\"leap-motion\").constructor == HTMLElement)\r\n    customElements.define(\"leap-motion\", LeapMotionElement);\r\n\r\nexport default LeapMotionElement;"]}